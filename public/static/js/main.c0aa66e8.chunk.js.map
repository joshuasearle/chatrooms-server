{"version":3,"sources":["util/stringShortener.ts","components/Navbar.tsx","hooks/useDisplayName.ts","hooks/useRooms.ts","api/apiPath.ts","hooks/useSocket.ts","api/registerDisplayName.ts","pages/LoginPage.tsx","pages/RoomPage.tsx","api/createRoom.ts","components/CreateRoomForm.tsx","components/RoomsList.tsx","pages/RoomsListPage.tsx","App.tsx","index.tsx"],"names":["stringShortener","text","length","slice","Navbar","displayName","loginString","className","to","useDisplayName","key","localDisplayName","window","localStorage","getItem","useState","setDisplayName","setItem","useRooms","socket","connected","rooms","setRooms","useEffect","on","socketRooms","process","useSocket","setSocket","socketIOClient","server","disconnect","registerDisplayName","a","axios","post","apiPath","socketId","id","res","data","LoginPage","displayNameInput","setDisplayNameInput","redirectNext","setRedirectNext","errorMessage","setErrorMessage","invalidName","buttonClickHandler","e","preventDefault","created","message","push","type","value","onChange","target","placeholder","disabled","onClick","RoomPage","input","setInput","roomName","useParams","room","find","messages","map","authorClass","messageClass","content","emit","createRoom","CreateRoomForm","setRoomName","confirmationMessage","setConfirmationMessage","handleCreateRoom","RoomsList","i","RoomsListPage","App","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c0aa66e8.chunk.js","sourcesContent":["const stringShortener = (text: string, length: number) => {\r\n  if (text.length <= length) return text;\r\n  return `${text.slice(0, length)}...`;\r\n};\r\n\r\nexport default stringShortener;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport stringShortener from '../util/stringShortener';\r\n\r\ninterface NavbarProps {\r\n  displayName: string;\r\n}\r\n\r\nconst Navbar: React.FC<NavbarProps> = ({ displayName }) => {\r\n  const loginString = displayName ? stringShortener(displayName, 10) : 'Login';\r\n  return (\r\n    <div className='navbar'>\r\n      <div className='navbar__items'>\r\n        <Link className='navbar__title' to={displayName ? '/rooms' : '/login'}>\r\n          <h1>Chatrooms</h1>\r\n        </Link>\r\n\r\n        <div className='navbar__links'>\r\n          {displayName && (\r\n            <Link className='navbar__link' to='/rooms'>\r\n              Rooms\r\n            </Link>\r\n          )}\r\n          <Link className='navbar__link' to='/login'>\r\n            {loginString}\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import { useState } from 'react';\r\n\r\nconst useDisplayName = (): [string, any, string, any] => {\r\n  const key = 'chatroomsDisplayName';\r\n  const localDisplayName = window.localStorage.getItem(key) || '';\r\n  const [displayName, setDisplayName] = useState<string>('');\r\n  const [displayNameInput, setDisplayNameInput] =\r\n    useState<string>(localDisplayName);\r\n\r\n  const newSetDisplayName = (displayName: string) => {\r\n    window.localStorage.setItem(key, displayName);\r\n    setDisplayName(displayName);\r\n  };\r\n\r\n  return [\r\n    displayName,\r\n    newSetDisplayName,\r\n    displayNameInput,\r\n    setDisplayNameInput,\r\n  ];\r\n};\r\n\r\nexport default useDisplayName;\r\n","import { useEffect, useState } from 'react';\r\nimport { Room } from '../types';\r\n\r\nconst useRooms = (socket: any, connected: boolean): [Room[], any] => {\r\n  const [rooms, setRooms] = useState<Room[]>([]);\r\n\r\n  useEffect(() => {\r\n    if (!connected) return;\r\n    socket.on(\r\n      'rooms',\r\n      (socketRooms: Room[]) => {\r\n        setRooms(socketRooms);\r\n      },\r\n      [connected]\r\n    );\r\n  });\r\n\r\n  return [rooms, setRooms];\r\n};\r\n\r\nexport default useRooms;\r\n","export default process.env.NODE_ENV === 'development'\r\n  ? 'http://localhost:5000'\r\n  : 'https://chatrooms-server-joshua-searle.herokuapp.com';\r\n","import { useState, useEffect } from 'react';\r\nimport socketIOClient from 'socket.io-client';\r\n\r\nimport server from '../api/apiPath';\r\n\r\nconst useSocket = (): [any, boolean] => {\r\n  const [socket, setSocket] = useState<any>(null);\r\n  const connected = socket !== null && socket.connected;\r\n  useEffect(() => {\r\n    const socket = socketIOClient(server);\r\n    socket.on('connect', () => {\r\n      setSocket(socket);\r\n    });\r\n    return () => {\r\n      socket.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  return [socket, connected];\r\n};\r\n\r\nexport default useSocket;\r\n","import axios from 'axios';\r\n\r\nimport apiPath from './apiPath';\r\n\r\nconst registerDisplayName = async (\r\n  socket: any,\r\n  displayName: string,\r\n  setRooms: any\r\n) => {\r\n  const res = await axios.post(`${apiPath}/login`, {\r\n    displayName,\r\n    socketId: socket.id,\r\n  });\r\n\r\n  setRooms(res.data.rooms);\r\n\r\n  return res.data;\r\n};\r\n\r\nexport default registerDisplayName;\r\n","import React, { useState } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport registerDisplayName from '../api/registerDisplayName';\r\n\r\ninterface LoginPageProps {\r\n  displayNameInput: string;\r\n  setDisplayNameInput: any;\r\n  setDisplayName: any;\r\n  connected: boolean;\r\n  socket: any;\r\n  setRooms: any;\r\n}\r\n\r\nconst LoginPage: React.FC<LoginPageProps> = ({\r\n  displayNameInput,\r\n  setDisplayNameInput,\r\n  setDisplayName,\r\n  connected,\r\n  socket,\r\n  setRooms,\r\n}) => {\r\n  const [redirectNext, setRedirectNext] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const invalidName = displayNameInput === '';\r\n\r\n  const buttonClickHandler = async (e: any) => {\r\n    e.preventDefault();\r\n    if (invalidName) return;\r\n    if (!connected) return setErrorMessage('Server error');\r\n    try {\r\n      const data = await registerDisplayName(\r\n        socket,\r\n        displayNameInput,\r\n        setRooms\r\n      );\r\n      if (!data.created) return setErrorMessage(data.message);\r\n      setDisplayName(displayNameInput);\r\n      setRedirectNext(true);\r\n    } catch (e) {\r\n      setErrorMessage('Server error');\r\n    }\r\n  };\r\n\r\n  if (redirectNext) return <Redirect to='/rooms' push />;\r\n\r\n  return (\r\n    <div className='login'>\r\n      <h1 className='login__title'>Set Your Display Name</h1>\r\n      <form className='login__form'>\r\n        <input\r\n          type='text'\r\n          className='login__input input'\r\n          value={displayNameInput}\r\n          onChange={(e: any) => setDisplayNameInput(e.target.value)}\r\n          placeholder='Enter your display name here'\r\n        />\r\n        {errorMessage && (\r\n          <div className='login__error error'>{errorMessage}</div>\r\n        )}\r\n        <button\r\n          disabled={invalidName}\r\n          className='button'\r\n          onClick={buttonClickHandler}\r\n        >\r\n          View Rooms\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","import React, { useState } from 'react';\r\nimport { Redirect, useParams } from 'react-router-dom';\r\nimport { Room } from '../types';\r\nimport stringShortener from '../util/stringShortener';\r\n\r\ninterface RoomPageProps {\r\n  rooms: Room[];\r\n  socket: any;\r\n  displayName: string;\r\n}\r\n\r\nconst RoomPage: React.FC<RoomPageProps> = ({ rooms, socket, displayName }) => {\r\n  const [input, setInput] = useState('');\r\n  const { roomName } = useParams<any>();\r\n  const room = rooms.find((room) => room.roomName === roomName);\r\n\r\n  const handleClick = (e: any) => {\r\n    e.preventDefault();\r\n    socket.emit('message', { roomName, content: input, socketId: socket.id });\r\n  };\r\n\r\n  if (!room) return <Redirect to={displayName ? '/rooms' : '/login'} />;\r\n\r\n  return (\r\n    <div className='room'>\r\n      <div className='room__messages'>\r\n        {room.messages.map((message) => {\r\n          const authorClass =\r\n            message.displayName === displayName\r\n              ? 'room__author room__author--right'\r\n              : 'room__author room__author--left';\r\n          const messageClass =\r\n            message.displayName === displayName\r\n              ? 'room__message room__message--right'\r\n              : 'room__message room__message--left';\r\n          return (\r\n            <>\r\n              <div className={authorClass}>\r\n                {stringShortener(message.displayName, 15)}\r\n              </div>\r\n              <div className={messageClass}>{message.content}</div>\r\n            </>\r\n          );\r\n        })}\r\n      </div>\r\n\r\n      <div className='room__send'>\r\n        <textarea\r\n          value={input}\r\n          onChange={(e: any) => setInput(e.target.value)}\r\n          className='room__input input'\r\n        />\r\n        <button className='room__button button' onClick={handleClick}>\r\n          Send\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RoomPage;\r\n","import axios from 'axios';\r\n\r\nimport apiPath from './apiPath';\r\n\r\nconst createRoom = async (socket: any, roomName: string) => {\r\n  const res = await axios.post(`${apiPath}/room`, {\r\n    roomName,\r\n    socketId: socket.id,\r\n  });\r\n\r\n  return res.data;\r\n};\r\n\r\nexport default createRoom;\r\n","import React, { useState } from 'react';\r\nimport createRoom from '../api/createRoom';\r\n\r\ninterface CreateRoomFormProps {\r\n  socket: any;\r\n}\r\n\r\nconst CreateRoomForm: React.FC<CreateRoomFormProps> = ({ socket }) => {\r\n  const [roomName, setRoomName] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const [confirmationMessage, setConfirmationMessage] = useState('');\r\n\r\n  const handleCreateRoom = async (e: any) => {\r\n    e.preventDefault();\r\n\r\n    const data = await createRoom(socket, roomName);\r\n\r\n    if (!data.created) {\r\n      setErrorMessage(data.message);\r\n      setConfirmationMessage('');\r\n    } else {\r\n      setConfirmationMessage(data.message);\r\n      setErrorMessage('');\r\n      setRoomName('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='create-room half-page'>\r\n      <h1 className='create-room__title'>Create Room</h1>\r\n      <form className='create-room__form'>\r\n        <input\r\n          value={roomName}\r\n          type='text'\r\n          className='create-room__input input'\r\n          onChange={(e: any) => {\r\n            setConfirmationMessage('');\r\n            setRoomName(e.target.value);\r\n          }}\r\n        />\r\n        {errorMessage && <div className='error'>{errorMessage}</div>}\r\n        {confirmationMessage && (\r\n          <div className='success'>{confirmationMessage}</div>\r\n        )}\r\n        <button\r\n          className='create-room__button button'\r\n          onClick={handleCreateRoom}\r\n        >\r\n          Create Room\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateRoomForm;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Room } from '../types';\r\nimport stringShortener from '../util/stringShortener';\r\n\r\ninterface RoomsListProps {\r\n  rooms: Room[];\r\n}\r\n\r\nconst RoomsList: React.FC<RoomsListProps> = ({ rooms }) => {\r\n  return (\r\n    <div className='rooms-list half-page'>\r\n      <h1 className='rooms-list__title'>Rooms</h1>\r\n      <div className='rooms-list__list'>\r\n        {rooms.map((room, i) => (\r\n          <Link\r\n            key={i}\r\n            className='rooms-list__button button'\r\n            to={`/rooms/${room.roomName}`}\r\n          >\r\n            {stringShortener(room.roomName, 10)}\r\n          </Link>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RoomsList;\r\n","import React from 'react';\r\nimport CreateRoomForm from '../components/CreateRoomForm';\r\nimport RoomsList from '../components/RoomsList';\r\nimport { Room } from '../types';\r\n\r\ninterface RoomsListPageProps {\r\n  socket: any;\r\n  rooms: Room[];\r\n}\r\n\r\nconst RoomsListPage: React.FC<RoomsListPageProps> = ({ socket, rooms }) => {\r\n  return (\r\n    <div className='rooms-page'>\r\n      <CreateRoomForm socket={socket} />\r\n      <RoomsList rooms={rooms} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RoomsListPage;\r\n","import React from 'react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom';\n\nimport Navbar from './components/Navbar';\nimport useDisplayName from './hooks/useDisplayName';\nimport useRooms from './hooks/useRooms';\nimport useSocket from './hooks/useSocket';\nimport LoginPage from './pages/LoginPage';\nimport RoomPage from './pages/RoomPage';\nimport RoomsListPage from './pages/RoomsListPage';\n\nconst App = () => {\n  const [displayName, setDisplayName, displayNameInput, setDisplayNameInput] =\n    useDisplayName();\n\n  const [socket, connected] = useSocket();\n  const [rooms, setRooms] = useRooms(socket, connected);\n\n  return (\n    <Router>\n      <Navbar displayName={displayName} />\n      <Switch>\n        <Route exact path='/login'>\n          <LoginPage\n            setRooms={setRooms}\n            socket={socket}\n            connected={connected}\n            displayNameInput={displayNameInput}\n            setDisplayNameInput={setDisplayNameInput}\n            setDisplayName={setDisplayName}\n          />\n        </Route>\n        <Route exact path='/rooms'>\n          {/* If not logged in, redirect to login page */}\n          {!displayName ? <Redirect to='/login' /> : null}\n          <RoomsListPage socket={socket} rooms={rooms} />\n        </Route>\n        <Route exact path='/rooms/:roomName'>\n          {/* If not logged in, redirect to login page */}\n          {!displayName ? <Redirect to='/login' /> : null}\n          <RoomPage rooms={rooms} socket={socket} displayName={displayName} />\n        </Route>\n        <Route exact path=''>\n          <Redirect to='/login' />\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/main.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}